import {
  BeforeInsert,
  BeforeUpdate,
  Column,
  Entity,
  PrimaryGeneratedColumn,
  ManyToMany,
  JoinTable,
} from 'typeorm'
import * as bcrypt from 'bcrypt'
import { EventEntity } from 'src/data/event.entity'

/**
 * Represents a user in the system.
 *
 * This entity defines a user, including their nickname, first name, last name,
 * email, password, and their relationships with other users (friends) and events.
 * It is mapped to the users table in the database.
 */
@Entity()
export class UserEntity {
  /**
   * The unique identifier for the user.
   *
   * This is the primary key for the user entity and is auto-generated by the database.
   *
   * @type {number}
   */
  @PrimaryGeneratedColumn()
  id: number

  /**
   * The nickname of the user.
   *
   * This field must be unique across all users.
   *
   * @type {string}
   */
  @Column({ unique: true })
  nickname: string

  /**
   * The user's first name.
   *
   * This field contains the given name of the user.
   *
   * @type {string}
   */
  @Column()
  firstName: string

  /**
   * The user's last name.
   *
   * This field contains the surname of the user.
   *
   * @type {string}
   */
  @Column()
  lastName: string

  /**
   * The user's email address.
   *
   * This field must be unique across all users.
   *
   * @type {string}
   */
  @Column({ unique: true })
  email: string

  /**
   * The user's password.
   *
   * This field stores the hashed password for the user. It is not stored in plaintext.
   *
   * @type {string}
   */
  @Column()
  password: string

  /**
   * A many-to-many relationship with other users who are friends.
   *
   * This field defines the relationship between the user and their friends.
   *
   * @type {UserEntity[]}
   */
  @ManyToMany(() => UserEntity, user => user.friends)
  @JoinTable()
  friends: UserEntity[]

  /**
   * A many-to-many relationship with events the user is attending.
   *
   * This field defines the relationship between the user and events they are part of.
   *
   * @type {EventEntity[]}
   */
  @ManyToMany(() => EventEntity, event => event.users)
  @JoinTable()
  events: EventEntity[]

  /**
   * Hashes the user's password before inserting or updating the user.
   *
   * This lifecycle hook runs before a user is inserted or updated in the database. It
   * ensures the user's password is hashed using bcrypt before being stored.
   */
  @BeforeInsert()
  @BeforeUpdate()
  async hashPassword() {
    const salt = await bcrypt.genSalt(10)
    this.password = await bcrypt.hash(this.password, salt)
  }

  /**
   * Validates the provided password against the stored hashed password.
   *
   * @param inputPassword - The password to validate against the stored hashed password.
   * @returns {Promise<boolean>} - True if the password is correct, false otherwise.
   */
  validatePassword(inputPassword: string): Promise<boolean> {
    return bcrypt.compare(inputPassword, this.password)
  }
}
